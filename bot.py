import re
import sqlite3
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

load_dotenv()
token = os.getenv("TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("debts.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS debts (
    from_user TEXT,
    to_user TEXT,
    amount REAL
)
""")
conn.commit()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞
def add_debt(from_user, to_user, amount):
    cursor.execute("INSERT INTO debts (from_user, to_user, amount) VALUES (?, ?, ?)", (from_user, to_user, amount))
    conn.commit()

# –û—á–∏—Å—Ç–∫–∞ –¥–æ–ª–≥–æ–≤
def clear_all_debts():
    cursor.execute("DELETE FROM debts")
    conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ–ª–≥–æ–≤
def get_summary():
    cursor.execute("SELECT from_user, to_user, SUM(amount) FROM debts GROUP BY from_user, to_user")
    rows = cursor.fetchall()
    if not rows:
        return "–ù–µ—Ç –¥–æ–ª–≥–æ–≤ üôå"
    return "\n".join([f"{f} –¥–æ–ª–∂–µ–Ω {t}: {a}‚ÇΩ" for f, t, a in rows])

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–ª–≥–∞
def parse_debt(message):
    pattern = r"@(\w+)\s+–¥–æ–ª–∂–µ–Ω\s+@(\w+)\s+(\d+(?:\.\d+)?)"
    match = re.search(pattern, message)
    if match:
        return match.group(1), match.group(2), float(match.group(3))
    return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is None:
        return

    text = update.message.text
    if "–¥–æ–ª–∂–µ–Ω" in text:
        parsed = parse_debt(text)
        if parsed:
            from_user, to_user, amount = parsed
            add_debt(from_user, to_user, amount)
            await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–Ω–æ: @{from_user} –¥–æ–ª–∂–µ–Ω @{to_user} {amount}‚ÇΩ")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–ª–≥. –§–æ—Ä–º–∞—Ç: @user1 –¥–æ–ª–∂–µ–Ω @user2 100")
    elif text.lower() == "–≤—Å–µ –¥–æ–ª–≥–∏ –≤–µ—Ä–Ω—É–ª–∏":
        clear_all_debts()
        await update.message.reply_text("–í—Å–µ –¥–æ–ª–≥–∏ –æ–±–Ω—É–ª–µ–Ω—ã ‚úÖ")
    elif text.lower() == "–¥–æ–ª–≥–∏":
        summary = get_summary()
        await update.message.reply_text(summary)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(token).build()

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
